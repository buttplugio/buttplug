# Taken from https://github.com/crate-ci/azure-pipelines/blob/master/default.yml
#
# The default file there builds with all/no-features, which won't work
# for us since we have platform specific features.

parameters:
  minrust: 1.49.0 # Rust 2018 with uniform paths
  setup: []
  services: {}
  cross: true

jobs:
 - job: style
   displayName: Style linting
   strategy:
     matrix:
       # stable:
       #   rust: stable
       # beta:
       #   rust: beta
       nightly:
         rust: nightly
   pool:
     vmImage: windows-latest
   continueOnError: true
   steps:
     - template: install-rust.yml@templates
       parameters:
         rust: $(rust)
         components:
           - rustfmt
           - clippy
     # Run any user-specific setup steps
     - ${{ parameters.setup }}
     - script: cargo +nightly fmt --all -- --check
       displayName: cargo fmt --check
     - script: cargo +nightly clippy --all
       displayName: cargo clippy
 - job: main
   displayName: Compile and test
   dependsOn: []
   ${{ if eq('true', parameters.cross) }}:
     strategy:
       matrix:
         "Linux (nightly)":
           vmImage: ubuntu-latest
           rust: nightly
         "Linux (beta)":
           vmImage: ubuntu-latest
           rust: beta
         Linux:
           vmImage: ubuntu-latest
           rust: stable
         MacOS:
           vmImage: macOS-latest
           rust: stable
         Windows:
           vmImage: windows-latest
           rust: stable
   ${{ if ne('true', parameters.cross) }}:
     strategy:
       matrix:
         "Linux (nightly)":
           vmImage: ubuntu-latest
           rust: nightly
         "Linux (beta)":
           vmImage: ubuntu-latest
           rust: beta
         Linux:
           vmImage: ubuntu-latest
           rust: stable
   pool:
     vmImage: $(vmImage)
   services:
     ${{ insert }}: ${{ parameters.services }}
   continueOnError: $[eq(variables.rust, 'nightly')]
   steps:
     - template: install-rust.yml@templates
       parameters:
         rust: $(rust)
     # Run any user-specific setup steps
     - ${{ parameters.setup }}
     - script: sudo apt-get update && sudo apt-get -y install libudev-dev libusb-1.0-0-dev libdbus-1-dev
       displayName: Install packages
       condition: eq(variables['Agent.OS'], 'Linux')
     - script: cargo check --all --bins --examples
       displayName: cargo check
     # Can't do no features because we're in a workspace
     #
     # - script: cargo check --all --bins --examples --no-default-features
     #   displayName: cargo check --no-default-features

     # Can't do all features because we have platform specific features
     #
     # - script: cargo check --all --bins --examples --all-features
     #   displayName: cargo check --all-features
     - script: cargo test --all
       displayName: cargo test
       # Set timeout for tests, as some tests seem to randomly stall.
       timeoutInMinutes: 10
 - ${{ if ne('false', parameters.minrust) }}:
   - job: msrv
     displayName: "${{ format('Minimum supported Rust version: {0}', parameters.minrust) }}"
     dependsOn: []
     # This represents the minimum Rust version supported.
     # Tests are not run as tests may require newer versions of rust.
     pool:
       vmImage: ubuntu-latest
     steps:
       - template: install-rust.yml@templates
         parameters:
           rust: ${{ parameters.minrust }}
       # Run any user-specific setup steps
       - ${{ parameters.setup }}
       - script: cargo check --all --bins --examples
         displayName: cargo check
       - script: cargo check --all --bins --examples --no-default-features
         displayName: cargo check --no-default-features
       - script: cargo check --all --bins --examples --all-features
         displayName: cargo check --all-features
 - ${{ if ne('', parameters.codecov_token) }}:
   - template: coverage.yml@templates
     parameters:
       token: ${{ parameters.codecov_token }}
       setup: ${{ parameters.setup }}
       services: ${{ parameters.services }}
       env: ${{ parameters.env }}
